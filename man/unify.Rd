% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/unify.R
\name{unify}
\alias{unify}
\title{Merge multiple GTFS into a single aggregated file}
\usage{
unify(
  gtfss,
  zipfile,
  generateTransfers = TRUE,
  transfer_distance = 300,
  transfer_time = 120,
  transfer_street_routing = FALSE
)
}
\arguments{
\item{gtfss}{tidygtfs[]. List of GTFS loaded using GTFSwizard::read_gtfs.}

\item{zipfile}{String. Path to the zip file the feed should be written to. The file is overwritten if it already exists.}

\item{generateTransfers}{Boolean. When true (default), generates transfers.txt, aggregating close stops, even if from different GTFS.}

\item{transfer_distance}{Integer. Upper straight-line distance limit in metres for transfers.}

\item{transfer_time}{Integer. Minimum time in seconds for transfers; all values below this will be replaced with this value, particularly all those defining in-place transfers where stop longitudes and latitudes remain identical.}

\item{transfer_street_routing}{If TRUE, transfer times are calculated by routing throughout the underlying street network (downloaded automatically).}
}
\value{
The path of the file written.
}
\description{
Merge multiple GTFS into a single aggregated file
}
\details{
When generating transfers, those already existing in each GTFS file are kept, extended with new ones computed based on the stops network of the final aggregated version. This computation is executed with `gtfsrouter::gtfs_transfer_table`, with the parameters `d_limit=transfer_distance`, `min_transfer_time=transfer_time` and `network_times=transfer_street_routing`. The other parameters are applied the library default values.
For a detailed example, see the \code{vignette("unify")}.
}
\examples{
\dontrun{
gtfs1 <- GTFSwizard::read_gtfs("gtfs1.zip")
gtfs2 <- GTFSwizard::read_gtfs("gtfs2.zip")
unified <- GTFShift::unify(list(gtfs1, gtfs2), "gtfs_unified.zip", TRUE)
}

}
\seealso{
[GTFSwizard::read_gtfs()]

[gtfsrouter::gtfs_transfer_table()]
}
